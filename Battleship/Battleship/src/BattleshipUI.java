/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Font;
         import java.util.Random;

/**
 *
 * @author Borinor
 */
public class BattleshipUI extends javax.swing.JFrame {

    /**
     * Creates new form BattleshipUI
     */
    public BattleshipUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        UserPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        usrBoard = new javax.swing.JTable();
        CompPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cmpBoard = new javax.swing.JTable();
        Interaction = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        UserInfo2 = new javax.swing.JLabel();
        EnemyInfo2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        EnemyInfo1 = new javax.swing.JLabel();
        UserInfo1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        usrBoard.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        usrBoard.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        usrBoard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"  A", null, null, null, null, null, null, null, null, null, null},
                {"  B", null, null, null, null, null, null, null, null, null, null},
                {"  C", null, null, null, null, null, null, null, null, null, null},
                {"  D", null, null, null, null, null, null, null, null, null, null},
                {"  E", null, null, null, null, null, null, null, null, null, null},
                {"  F", null, null, null, null, null, null, null, null, null, null},
                {"  G", null, null, null, null, null, null, null, null, null, null},
                {"  H", null, null, null, null, null, null, null, null, null, null},
                {"  I", null, null, null, null, null, null, null, null, null, null},
                {"  J", null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "  1", "  2", "  3", "  4", "  5", "  6", "  7", "  8", "  9", " 10"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        usrBoard.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        usrBoard.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        usrBoard.setPreferredSize(new java.awt.Dimension(300, 340));
        usrBoard.setRowHeight(34);
        usrBoard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usrBoardMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(usrBoard);
        if (usrBoard.getColumnModel().getColumnCount() > 0) {
            usrBoard.getColumnModel().getColumn(0).setPreferredWidth(34);
            usrBoard.getColumnModel().getColumn(1).setPreferredWidth(34);
            usrBoard.getColumnModel().getColumn(2).setPreferredWidth(34);
            usrBoard.getColumnModel().getColumn(3).setPreferredWidth(34);
            usrBoard.getColumnModel().getColumn(4).setPreferredWidth(34);
            usrBoard.getColumnModel().getColumn(5).setPreferredWidth(34);
            usrBoard.getColumnModel().getColumn(6).setPreferredWidth(34);
            usrBoard.getColumnModel().getColumn(7).setPreferredWidth(34);
            usrBoard.getColumnModel().getColumn(8).setPreferredWidth(34);
            usrBoard.getColumnModel().getColumn(9).setPreferredWidth(34);
            usrBoard.getColumnModel().getColumn(10).setPreferredWidth(34);
        }

        javax.swing.GroupLayout UserPanelLayout = new javax.swing.GroupLayout(UserPanel);
        UserPanel.setLayout(UserPanelLayout);
        UserPanelLayout.setHorizontalGroup(
            UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UserPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        UserPanelLayout.setVerticalGroup(
            UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        cmpBoard.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cmpBoard.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        cmpBoard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"  A", null, null, null, null, null, null, null, null, null, null},
                {"  B", null, null, null, null, null, null, null, null, null, null},
                {"  C", null, null, null, null, null, null, null, null, null, null},
                {"  D", null, null, null, null, null, null, null, null, null, null},
                {"  E", null, null, null, null, null, null, null, null, null, null},
                {"  F", null, null, null, null, null, null, null, null, null, null},
                {"  G", null, null, null, null, null, null, null, null, null, null},
                {"  H", null, null, null, null, null, null, null, null, null, null},
                {"  I", null, null, null, null, null, null, null, null, null, null},
                {"  J", null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "  1", "  2", "  3", "  4", "  5", "  6", "  7", "  8", "  9", " 10"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cmpBoard.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        cmpBoard.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        cmpBoard.setPreferredSize(new java.awt.Dimension(300, 340));
        cmpBoard.setRowHeight(34);
        cmpBoard.setSelectionBackground(new java.awt.Color(0, 204, 255));
        cmpBoard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmpBoardMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(cmpBoard);
        if (cmpBoard.getColumnModel().getColumnCount() > 0) {
            cmpBoard.getColumnModel().getColumn(0).setPreferredWidth(34);
            cmpBoard.getColumnModel().getColumn(1).setPreferredWidth(34);
            cmpBoard.getColumnModel().getColumn(2).setPreferredWidth(34);
            cmpBoard.getColumnModel().getColumn(3).setPreferredWidth(34);
            cmpBoard.getColumnModel().getColumn(4).setPreferredWidth(34);
            cmpBoard.getColumnModel().getColumn(5).setPreferredWidth(34);
            cmpBoard.getColumnModel().getColumn(6).setPreferredWidth(34);
            cmpBoard.getColumnModel().getColumn(7).setPreferredWidth(34);
            cmpBoard.getColumnModel().getColumn(8).setPreferredWidth(34);
            cmpBoard.getColumnModel().getColumn(9).setPreferredWidth(34);
            cmpBoard.getColumnModel().getColumn(10).setPreferredWidth(34);
        }

        javax.swing.GroupLayout CompPanelLayout = new javax.swing.GroupLayout(CompPanel);
        CompPanel.setLayout(CompPanelLayout);
        CompPanelLayout.setHorizontalGroup(
            CompPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CompPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        CompPanelLayout.setVerticalGroup(
            CompPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CompPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("   O = Your Ship");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("    - = Unkown");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("{--} = Hit");

        UserInfo2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        UserInfo2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        UserInfo2.setText("Placeholder");
        UserInfo2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        UserInfo2.setPreferredSize(new java.awt.Dimension(55, 10));

        EnemyInfo2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        EnemyInfo2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        EnemyInfo2.setText("Placeholder");
        EnemyInfo2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        EnemyInfo2.setPreferredSize(new java.awt.Dimension(55, 10));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Your Info:");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Enemy Info:");

        EnemyInfo1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        EnemyInfo1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        EnemyInfo1.setText("Placeholder");
        EnemyInfo1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        EnemyInfo1.setPreferredSize(new java.awt.Dimension(55, 10));

        UserInfo1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        UserInfo1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        UserInfo1.setText("Placeholder");
        UserInfo1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        UserInfo1.setPreferredSize(new java.awt.Dimension(55, 10));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText("     X = Miss");

        javax.swing.GroupLayout InteractionLayout = new javax.swing.GroupLayout(Interaction);
        Interaction.setLayout(InteractionLayout);
        InteractionLayout.setHorizontalGroup(
            InteractionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InteractionLayout.createSequentialGroup()
                .addGroup(InteractionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InteractionLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(InteractionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EnemyInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(UserInfo2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(InteractionLayout.createSequentialGroup()
                                .addGap(0, 8, Short.MAX_VALUE)
                                .addGroup(InteractionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addGroup(InteractionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)))
                                .addGap(0, 8, Short.MAX_VALUE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(UserInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(InteractionLayout.createSequentialGroup()
                        .addGroup(InteractionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(InteractionLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jButton1))
                            .addGroup(InteractionLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(InteractionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(EnemyInfo2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        InteractionLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel6});

        InteractionLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {EnemyInfo1, EnemyInfo2, UserInfo1, UserInfo2});

        InteractionLayout.setVerticalGroup(
            InteractionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InteractionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserInfo2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(EnemyInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(EnemyInfo2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jButton1)
                .addContainerGap())
        );

        InteractionLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {UserInfo1, UserInfo2});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(UserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(Interaction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(23, 23, 23)
                .addComponent(CompPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Interaction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(CompPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(UserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usrBoardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usrBoardMouseClicked

    }//GEN-LAST:event_usrBoardMouseClicked
    
    public Integer[][] gridUser = new Integer[10][10];
    public Integer[][] gridEnemy = new Integer[10][10];
    String firing, input, temp;
    int tempX, tempY, counterUser = 17, counterEnemy = 17;
    boolean endCase = false;
    Random rand = new Random();
         
    private void cmpBoardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmpBoardMouseClicked
    int locx, locy;
    locx = cmpBoard.getSelectedRow();
    locy = cmpBoard.getSelectedColumn();
    if (counterUser == 0)
    {
     UserInfo1.setText("You, uhh...");
     UserInfo2.setText("You lost, mate.");
     EnemyInfo1.setText("Sorry bout that.");
     EnemyInfo2.setText("Try again?");
     return;
    }
    if (counterEnemy == 0)
    {
     UserInfo1.setText("You already...");
     UserInfo2.setText("You won, dude.");
     EnemyInfo1.setText("Or lady.");
     EnemyInfo2.setText("You did it.");
     return;
    }
    
    switch (gridEnemy[locx][locy - 1])
    {
        case(-1): gridEnemy[locx][locy - 1] = 0; UserInfo2.setText("You Missed!"); break;
        case(0): UserInfo2.setText("Misfire!"); EnemyInfo2.setText("New Target!"); return;
        case(1): gridEnemy[locx][locy - 1] = 2; counterEnemy--; UserInfo2.setText("Hit!"); break;
        case(2): UserInfo2.setText("Misfire!"); EnemyInfo2.setText("New Target!"); return;
        default: UserInfo2.setText("What?"); gridEnemy[locx][locy - 1] = 0; break;
    }
    
    tempX = rand.nextInt(10);
    tempY = rand.nextInt(10);
    
    while(gridUser[tempX][tempY] == 0 || gridUser[tempX][tempY] ==2)
    {
     tempX = rand.nextInt(10);
     tempY = rand.nextInt(10);
    }
    if (gridUser[tempX][tempY] == -1)
    {
     gridUser[tempX][tempY] = 0; EnemyInfo2.setText("They Missed!");
    }
    else
    {
     gridUser[tempX][tempY] = 2; counterUser--; EnemyInfo2.setText("They Hit!");
    }
    
    String temporary = "";
    for(int x = 0; x < 10; x++)
    {
     for (int y = 0; y < 10; y++)
     {
       switch(gridEnemy[x][y])
       {
           case(-1): temporary = " -"; break;
           case(0):  temporary = " X"; break;
           case(1):  temporary = " -"; break;
           case(2):  temporary = "{--}"; break;
           default: temporary = "Y"; break;
       }
       cmpBoard.setValueAt(temporary, x, y + 1);
     }
    }
    for(int x = 0; x < 10; x++)
    {
     for (int y = 0; y < 10; y++)
     {
       switch(gridUser[x][y])
       {
           case(-1): temporary = " -"; break;
           case(0):  temporary = " X"; break;
           case(1):  temporary = "O"; break;
           case(2):  temporary = "{--}"; break;
           default:  temporary = "Y"; break;
       }
       usrBoard.setValueAt(temporary, x, y + 1);
     }
    }
    UserInfo1.setText(counterUser + " Ships");
    EnemyInfo1.setText(counterEnemy + " Ships");
    
    if (counterUser == 0)
    {
      UserInfo1.setText("Your Battleships");
      UserInfo2.setText("Were Sunk!");
      EnemyInfo1.setText("The Computer Won!");
      EnemyInfo2.setText("Randomly.");
    }
    if (counterEnemy == 0)
    {
      UserInfo1.setText("You Sunk All");
      UserInfo2.setText("Their Battleships!");
      EnemyInfo1.setText("You Won!");
      EnemyInfo2.setText("Well Done.");
    }
    }//GEN-LAST:event_cmpBoardMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
UserInfo1.setText("17 Ships");
UserInfo2.setText("Click to Shoot!");
EnemyInfo1.setText("17 Ships");
EnemyInfo2.setText("Begin!");

        for(int x = 0; x < 10; x++)
	 {for (int y = 0; y < 10; y++)
	  {gridUser[x][y] = -1;}}

	 for(int x = 0; x < 10; x++)
	 {for (int y = 0; y < 10; y++)
	  {gridEnemy[x][y] = -1;}}
         
	 for(int i = 0; i < 5; i++)
	 {
	  switch(i)
	  {
	   case 0: tempX = 100;
		   tempY = 100;
		   while (tempX + 5 > 10 || tempY + 5 > 10)
	 	    {tempX = rand.nextInt(9); tempY = rand.nextInt(9);}

		    if ((tempX + tempY) % 2 == 0)
	   	     {
		      for(int h = 0; h < 5; h++) 
		       {
		  	gridUser[tempX][tempY + h] = 1;
		       }
	      	     }
		    else 
		     {
		      for(int h = 0; h < 5; h++) 
		       {
			gridUser[tempX + h][tempY] = 1;
		       }
		     }
	  	   break;

	   case 1: tempX = 100;
		   tempY = 100;
		   endCase = false;

		    while (tempX + 4 > 10 || tempY + 4 > 10)
	 	    {tempX = rand.nextInt(9); tempY = rand.nextInt(9);}

	  	   for (int g = 0; g < 4; g++)
	    	    {
	 	     if((tempX + tempY) % 2 == 0)
	 	      {
		       if (gridUser[tempX][tempY + g] == 1)
			{
	 	 	 i--;
			 endCase = true;
			 break;
			}
		      }
		     else
		      {
		       if (gridUser[tempX + g][tempY] == 1)
			{
			 i--;
			 endCase = true;
			 break;
			}
		      }
		    }
		    if (endCase == true)
		     break;

		    if ((tempX + tempY) % 2 == 0)
	   	     {
		      for(int h = 0; h < 4; h++) 
		       {
		  	gridUser[tempX][tempY + h] = 1;
		       }
	      	     }
		    else 
		     {
		      for(int h = 0; h < 4; h++) 
		       {
			gridUser[tempX + h][tempY] = 1;
		       }
		     }
	  	   break;
	   case 2: tempX = 100;
		   tempY = 100;
		   endCase = false;

		    while (tempX + 3 > 10 || tempY + 3 > 10)
	 	    {tempX = rand.nextInt(9); tempY = rand.nextInt(9);}

	  	   for (int g = 0; g < 3; g++)
	    	    {
	 	     if((tempX + tempY) % 2 == 0)
	 	      {
		       if (gridUser[tempX][tempY + g] == 1)
			{
	 	 	 i--;
			 endCase = true;
			 break;
			}
		      }
		     else
		      {
		       if (gridUser[tempX + g][tempY] == 1)
			{
			 i--;
			 endCase = true;
			 break;
			}
		      }
		    }
		    if (endCase == true)
		    break;

		    if (((tempX + tempY) % 2) == 0)
	   	     {
		      for(int h = 0; h < 3; h++) 
		       {
		  	gridUser[tempX][tempY + h] = 1;
		       }
	      	     }
		    else 
		     {
		      for(int h = 0; h < 3; h++) 
		       {
			gridUser[tempX + h][tempY] = 1;
		       }
		     }
	  	   break;
	   case 3: tempX = 100;
		   tempY = 100;
		   endCase = false;

		    while (tempX + 3 > 10 || tempY + 3 > 10)
	 	    {tempX = rand.nextInt(9); tempY = rand.nextInt(9);}

	  	   for (int g = 0; g < 3; g++)
	    	    {
	 	     if((tempX + tempY) % 2 == 0)
	 	      {
		       if (gridUser[tempX][tempY + g] == 1)
			{
	 	 	 i--;
			 endCase = true;
			 break;
			}
		      }
		     else
		      {
		       if (gridUser[tempX + g][tempY] == 1)
			{
			 i--;
			 endCase = true;
			 break;
			}
		      }
		    }
		    if (endCase == true)
		     break;

		    if ((tempX + tempY) % 2 == 0)
	   	     {
		      for(int h = 0; h < 3; h++) 
		       {
		  	gridUser[tempX][tempY + h] = 1;
		       }
	      	     }
		    else 
		     {
		      for(int h = 0; h < 3; h++) 
		       {
			gridUser[tempX + h][tempY] = 1;
		       }
		     }
	  	   break;
	   case 4: tempX = 100;
		   tempY = 100;
		   endCase = false;

		    while (tempX + 2 > 10 || tempY + 2 > 10)
	 	    {tempX = rand.nextInt(9); tempY = rand.nextInt(9);}

	  	   for (int g = 0; g < 2; g++)
	    	    {
	 	     if((tempX + tempY) % 2 == 0)
	 	      {
		       if (gridUser[tempX][tempY + g] == 1)
			{
	 	 	 i--;
	   	 	 endCase = true;
			  break;
	  		}
		      }
		     else
		      {
		       if (gridUser[tempX + g][tempY] == 1)
			{
			 i--;
			 endCase = true;
			  break;
			}
		      }
		    }
	 	    if (endCase == true)
		     break;

		    if ((tempX + tempY) % 2 == 0)
	   	     {
		      for(int h = 0; h < 2; h++) 
		       {
		  	gridUser[tempX][tempY + h] = 1;
		       }
	      	     }
		    else 
		     {
		      for(int h = 0; h < 2; h++) 
		       {
			gridUser[tempX + h][tempY] = 1;
		       }
		     }
	  	   break;
	  }
	 }

	 for(int i = 0; i < 5; i++)
	 {
	  switch(i)
	  {
	   case 0: tempX = 100;
		   tempY = 100;
		   while (tempX + 5 > 10 || tempY + 5 > 10)
	 	    {tempX = rand.nextInt(9); tempY = rand.nextInt(9);}

		    if ((tempX + tempY) % 2 == 0)
	   	     {
		      for(int h = 0; h < 5; h++) 
		       {
		  	gridEnemy[tempX][tempY + h] = 1;
		       }
	      	     }
		    else 
		     {
		      for(int h = 0; h < 5; h++) 
		       {
			gridEnemy[tempX + h][tempY] = 1;
		       }
		     }
	  	   break;

	   case 1: tempX = 100;
		   tempY = 100;
		   endCase = false;

		    while (tempX + 4 > 10 || tempY + 4 > 10)
	 	    {tempX = rand.nextInt(9); tempY = rand.nextInt(9);}

	  	   for (int g = 0; g < 4; g++)
	    	    {
	 	     if((tempX + tempY) % 2 == 0)
	 	      {
		       if (gridEnemy[tempX][tempY + g] == 1)
			{
	 	 	 i--;
			 endCase = true;
			 break;
			}
		      }
		     else
		      {
		       if (gridEnemy[tempX + g][tempY] == 1)
			{
			 i--;
			 endCase = true;
			 break;
			}
		      }
		    }
		    if (endCase == true)
		     break;

		    if ((tempX + tempY) % 2 == 0)
	   	     {
		      for(int h = 0; h < 4; h++) 
		       {
		  	gridEnemy[tempX][tempY + h] = 1;
		       }
	      	     }
		    else 
		     {
		      for(int h = 0; h < 4; h++) 
		       {
			gridEnemy[tempX + h][tempY] = 1;
		       }
		     }
	  	   break;
	   case 2: tempX = 100;
		   tempY = 100;
		   endCase = false;

		    while (tempX + 3 > 10 || tempY + 3 > 10)
	 	    {tempX = rand.nextInt(9); tempY = rand.nextInt(9);}

	  	   for (int g = 0; g < 3; g++)
	    	    {
	 	     if((tempX + tempY) % 2 == 0)
	 	      {
		       if (gridEnemy[tempX][tempY + g] == 1)
			{
	 	 	 i--;
			 endCase = true;
			 break;
			}
		      }
		     else
		      {
		       if (gridEnemy[tempX + g][tempY] == 1)
			{
			 i--;
			 endCase = true;
			 break;
			}
		      }
		    }
		    if (endCase == true)
		    break;

		    if ((tempX + tempY) % 2 == 0)
	   	     {
		      for(int h = 0; h < 3; h++) 
		       {
		  	gridEnemy[tempX][tempY + h] = 1;
		       }
	      	     }
		    else 
		     {
		      for(int h = 0; h < 3; h++) 
		       {
			gridEnemy[tempX + h][tempY] = 1;
		       }
		     }
	  	   break;
	   case 3: tempX = 100;
		   tempY = 100;
		   endCase = false;

		    while (tempX + 3 > 10 || tempY + 3 > 10)
	 	    {tempX = rand.nextInt(9); tempY = rand.nextInt(9);}

	  	   for (int g = 0; g < 3; g++)
	    	    {
	 	     if((tempX + tempY) % 2 == 0)
	 	      {
		       if (gridEnemy[tempX][tempY + g] == 1)
			{
	 	 	 i--;
			 endCase = true;
			 break;
			}
		      }
		     else
		      {
		       if (gridEnemy[tempX + g][tempY] == 1)
			{
			 i--;
			 endCase = true;
			 break;
			}
		      }
		    }
		    if (endCase == true)
		     break;

		    if ((tempX + tempY) % 2 == 0)
	   	     {
		      for(int h = 0; h < 3; h++) 
		       {
		  	gridEnemy[tempX][tempY + h] = 1;
		       }
	      	     }
		    else 
		     {
		      for(int h = 0; h < 3; h++) 
		       {
			gridEnemy[tempX + h][tempY] = 1;
		       }
		     }
	  	   break;
	   case 4: tempX = 100;
		   tempY = 100;
		   endCase = false;

		    while (tempX + 2 > 10 || tempY + 2 > 10)
	 	    {tempX = rand.nextInt(9); tempY = rand.nextInt(9);}

	  	   for (int g = 0; g < 2; g++)
	    	    {
	 	     if((tempX + tempY) % 2 == 0)
	 	      {
		       if (gridEnemy[tempX][tempY + g] == 1)
			{
	 	 	 i--;
	   	 	 endCase = true;
			  break;
	  		}
		      }
		     else
		      {
		       if (gridEnemy[tempX + g][tempY] == 1)
			{
			 i--;
			 endCase = true;
			  break;
			}
		      }
		    }
	 	    if (endCase == true)
		     break;

		    if ((tempX + tempY) % 2 == 0)
	   	     {
		      for(int h = 0; h < 2; h++) 
		       {
		  	gridEnemy[tempX][tempY + h] = 1;
		       }
	      	     }
		    else 
		     {
		      for(int h = 0; h < 2; h++) 
		       {
			gridEnemy[tempX + h][tempY] = 1;
		       }
		     }
	  	   break;
	  }
	 }
    String temporary = "";
    for(int x = 0; x < 10; x++)
    {
     for (int y = 0; y < 10; y++)
     {
       switch(gridEnemy[x][y])
       {
           case(-1): temporary = "-"; break;
           case(0):  temporary = "X"; break;
           case(1):  temporary = "-"; break;
           case(2):  temporary = "~"; break;
           default: temporary = "Y"; break;
       }
       cmpBoard.setValueAt(temporary, x, y + 1);
     }
    }
    for(int x = 0; x < 10; x++)
    {
     for (int y = 0; y < 10; y++)
     {
       switch(gridUser[x][y])
       {
           case(-1): temporary = "-"; break;
           case(0):  temporary = "X"; break;
           case(1):  temporary = "O"; break;
           case(2):  temporary = "~"; break;
           default:  temporary = "Y"; break;
       }
       usrBoard.setValueAt(temporary, x, y + 1);
     }
    }
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BattleshipUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BattleshipUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BattleshipUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BattleshipUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BattleshipUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CompPanel;
    private javax.swing.JLabel EnemyInfo1;
    private javax.swing.JLabel EnemyInfo2;
    private javax.swing.JPanel Interaction;
    private javax.swing.JLabel UserInfo1;
    private javax.swing.JLabel UserInfo2;
    private javax.swing.JPanel UserPanel;
    private javax.swing.JTable cmpBoard;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable usrBoard;
    // End of variables declaration//GEN-END:variables
}
